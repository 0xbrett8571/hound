name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive  # In case there are submodules
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run linting
      run: |
        # Format check with black
        black --check --diff .
        
        # Linting with ruff
        ruff check .
    
    - name: Run type checking
      run: |
        mypy --install-types --non-interactive hound/ || true  # Non-blocking for now
    
    - name: Run tests
      run: |
        pytest tests/ \
          --tb=short \
          --cov=hound \
          --cov-report=xml \
          --cov-report=term-missing \
          --junit-xml=test-results.xml
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results.xml
    
    - name: Upload coverage reports
      if: matrix.python-version == '3.12'  # Only upload once
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  test-integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run integration tests
      run: |
        # Run specifically the end-to-end tests
        pytest tests/test_analysis_end_to_end.py -v --tb=short
    
    - name: Test import
      run: |
        python -c "from hound import *; print('Import successful')"

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security checks
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt

  all-checks-passed:
    needs: [test, test-integration]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check if all tests passed
      run: |
        if [[ "${{ needs.test.result }}" != "success" || "${{ needs.test-integration.result }}" != "success" ]]; then
          echo "One or more test jobs failed"
          exit 1
        fi
        echo "All tests passed successfully!"